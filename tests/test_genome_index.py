import pytest
from genomepy import Genome

@pytest.fixture
def genome():
    g = Genome('tests/data/genome/scaffold_54')
    return g

@pytest.fixture
def loc_and_seq():
    return ("scaffold_54", 141483, 141492, "+"), "GTCTATGGG"

@pytest.fixture
def db(tmpdir, genome):
    from pita.annotationdb import AnnotationDb
    conn = "sqlite:///{}/pita_test_database.db".format(tmpdir)
    db = AnnotationDb(conn=conn,
            new=True,
            index=genome)
    return db

@pytest.fixture
def collection(db):
    from pita.dbcollection import DbCollection
    from pita.io import read_bed_transcripts

    bed = "tests/data/scaffold_54_genes.bed"
    for tname, source, exons in read_bed_transcripts(open(bed), "test", 0):
        db.add_transcript("{0}{1}{2}".format("test", ":::", tname), source, exons)
    
    mc = DbCollection(db, [])
    return mc

@pytest.fixture
def seqs():
    seqs = [
"CAGGAAGTCACGGAGCGCGGGATTTTTCAATCAGACTGATGAACAGATGAATACGACGAAGAGCATGGAGGCAATTCTGGAATTTTTTGTGCTGTGTGATCCAAAGAAGCGGCCAGTCAGACTGAACCGGTTGCCTTCTGTACCAAAGGATGCACTGTGTTATTCTGCCCTGCTGCCATCTCCTCTACCATCCCAGCTGTTGATCTTTGGCTTAGGTGACTGGTCAGGGTTATCTGGAGGAAGCACAGTAGAAGTGAAATTGGAAGGAAGTGGAACCAAAGAGCACAGACTGGGAACGCTGACTCCTGAGTCAAGATGCTTCCTGTGGGAATCTGACCAAAACCCCGACACCAGCATAATGTTACAAGAGGGAAAGCTGCATATCTGCATGTCGGTTAAAGGGCAGGTCAATATTAATTCTACTAACAGGAAAAAAGAGCATGGAAAGCGCAAGAGAATTAAAGAGGAAGAGGAAAATGTTTGTCCAAATAGTGGACATGTAAAAGTGCCTGCTCAAAAACAGAAGAACAGTAGTCCTAAGAGTCCAGCACCAGCAAAGCAACTTGCTCATTCTAAGGCCTTTTTAGCAGCACCAGCTGTGCCAACTGCACGCTGGGGTCAAGCGCTCTGTCCTGTCAACTCTGAGACAGTAATCTTGATTGGTGGACAGGGAACACGTATGCAGTTCTGTAAGGATTCCATGTGGAAACTGAATACAGATAGGAGCACATGGACTCCAGCTGAGGCATTGGCAGATGGCCTTTCACCAGAAGCTCGTACTGGGCACACAGCAACCTTCGATCCTGAGAACAACCGTATTTATGTGTTTGGAGGTTCTAAGAACAGAAAATGGTTCAATGATGTACATATTTTGGACATTGAGGCCTGGCGATGGAGGAGCGTGGAAGTAAGTAAACTAAGTAGTTGA",
"CAGGAAGTCACGGAGCGCGGGATTTTTCAATCAGACTGATGAACAGATGAATACGACGAAGAGCATGGAGGCAATTCTGGAATTTTTTGTGCTGTGTGATCCAAAGAAGCGGCCAGTCAGACTGAACCGGTTGCCTTCTGTACCAAAGGATGCACTGTGTTATTCTGCCCTGCTGCCATCTCCTCTACCATCCCAGCTGTTGATCTTTGGCTTAGGTGACTGGTCAGGGTTATCTGGAGGAAGCACAGTAGAAGTGAAATTGGAAGGAAGTGGAACCAAAGAGCACAGACTGGGAACGCTGACTCCTGAGTCAAGATGCTTCCTGTGGGAATCTGACCAAAACCCCGACACCAGCATAATGTTACAAGAGGGAAAGCTGCATATCTGCATGTCGGTTAAAGGGCAGGTCAATATTAATTCTACTAACAGGAAAAAAGAGCATGGAAAGCGCAAGAGAATTAAAGAGGAAGAGGAAAATGTTTGTCCAAATAGTGGACATGTAAAAGTGCCTGCTCAAAAACAGAAGAACAGTAGTCCTAAGAGTCCAGCACCAGCAAAGCAACTTGCTCATTCTAAGGCCTTTTTAGCAGCACCAGCTGTGCCAACTGCACGCTGGGGTCAAGCGCTCTGTCCTGTCAACTCTGAGACAGTAATCTTGATTGGTGGACAGGGAACACGTATGCAGTTCTGTAAGGATTCCATGTGGAAACTGAATACAGATAGGAGCACATGGACTCCAGCTGAGGCATTGGCAGATGGCCTTTCACCAGAAGCTCGTACTGGGCACACAGCAACCTTCGATCCTGAGAACAACCGTATTTATGTGTTTGGAGGTTCTAAGAACAGAAAATGGTTCAATGATGTACATATTTTGGACATTGAGGCCTGGCGATGGAGGAGCGTGGAAGCACAGGGCAAAGTTCCCCCTCTCTCTTATCATACGTGCTCTCTGTTTCGAGGAGAGCTCTTTGTGTTTGGTGGGGTCTTTCCACGTCCTAATCCTGAACCTGATGGCTGCAGCAATTTACTCTACATTTTTGATCCGCAACATGAGATTTGGTACCAGCCTATTGTCCTAGGAAAGACCCCTTCGTCACGCTCAGGGTAAGCAGGAGAGGCATTTAGAGCAGAACAGAGTCTATAATCCTTTGGGAAATGAGTCAGGAGAGCATGTGGTTCATTTTCACAAGTGATGATGCCACCCTTAAATCAATCTGTAACTATAAGTTTTAGAGGAGATGCAAGTGCCTATTTATATTAATAACTAAATCTTTTTTGTGTTTTGTGTATAAAAACATAGTAAGTTAGGTTGAAAAAAAGATGTACGTACTGTTACCCTCCCCCCCCTTTTTTTTTTGTTACCC",
"CAGGAAGTCACGGAGCGCGGGATTTTTCAATCAGACTGATGAACAGATGAATACGACGAAGAGCATGGAGGCAATTCTGGAATTTTTTGTGCTGTGTGATCCAAAGAAGCGGCCAGTCAGACTGAACCGGTTGCCTTCTGTACCAAAGGATGCACTGTGTTATTCTGCCCTGCTGCCATCTCCTCTACCATCCCAGCTGTTGATCTTTGGCTTAGGTGACTGGTCAGGGTTATCTGGAGGAAGCACAGTAGAAGTGAAATTGGAAGGAAGTGGAACCAAAGAGCACAGACTGGGAACGCTGACTCCTGAGTCAAGATGCTTCCTGTGGGAATCTGACCAAAACCCCGACACCAGCATAATGTTACAAGAGGGAAAGCTGCATATCTGCATGTCGGTTAAAGGGCAGGTCAATATTAATTCTACTAACAGGAAAAAAGAGCATGGAAAGCGCAAGAGAATTAAAGAGGAAGAGGAAAATGTTTGTCCAAATAGTGGACATGTAAAAGTGCCTGCTCAAAAACAGAAGAACAGTAGTCCTAAGAGTCCAGCACCAGCAAAGCAACTTGCTCATTCTAAGGCCTTTTTAGCAGCACCAGCTGTGCCAACTGCACGCTGGGGTCAAGCGCTCTGTCCTGTCAACTCTGAGACAGTAATCTTGATTGGTGGACAGGGAACACGTATGCAGTTCTGTAAGGATTCCATGTGGAAACTGAATACAGATAGGAGCACATGGACTCCAGCTGAGGCATTGGCAGATGGCCTTTCACCAGAAGCTCGTACTGGGCACACAGCAACCTTCGATCCTGAGAACAACCGTATTTATGTGTTTGGAGGTTCTAAGAACAGAAAATGGTTCAATGATGTACATATTTTGGACATTGAGGCCTGGCGATGGAGGAGCGTGGAAGCACAGGGCAAAGTTCCCCCTCTCTCTTATCATACGTGCTCTCTGTTTCGAGGAGAGCTCTTTGTGTTTGGTGGGGTCTTTCCACGTCCTAATCCTGAACCTGATGGCTGCAGCAATTTACTCTACATTTTTGATCCGCAACATGAGATTTGGTACCAGCCTATTGTCCTAGGAAAGACCCCTTCGTCACGCTCAGGGCACTCTGCCTGTCTGTTAAACAGAGAGCTGTATGTTTTTGGTGGATGGGATACTCCTGTTTGTTACAATGACCTCTACGTACTGGATCTGGGACTCATGGAGTTCTCTCTTGTTGAGGTCACAGGATCCTCACCCTCTCCTCGTTGCTGGCATTCTGCTGCCCCTGTGTCAGATTTCCAGTTCTTGATTCACGGAGGTTATGATGGAAACCAGGCTCTGAGTGACACCTACCTATTCAACACTGGAGCCCCTCTGCCACTGGCCAGAATCCACAGATCCAGTCCAGGCCTGCACTAACAGATTTTGGAGTACACCATACTGGGAACACTCCTCGCTACTACCGAAGGCCACACATTCTACATCAGCTGGAAGGGACTGTGCAGCAGGATCCAAGACTGTTGTTTTTTATTTAAAAACAATATGCATGGTTAAGAGCATTACTTTAGGTCAAAATGTTACCTGGTATAAATTGGCCTATCCTAACCAATTTGTTTTGTGTAACCAAAGCATATGATTAGGCGTATCCCTAACTTGTCT"
    ]

    return seqs

def test_genome_index(genome, loc_and_seq):
    loc, seq = loc_and_seq
    
    assert seq == genome[loc[0]][loc[1]:loc[2]]

def test_get_transcript_sequence(collection, seqs):
    from pita.util import exons_to_seq

    model = [m for m in collection.get_best_variants([])][0]
    seq = sorted(seqs, key=lambda x:len(x))[-1]
    assert seq.upper() == exons_to_seq(model).upper()
    
    

